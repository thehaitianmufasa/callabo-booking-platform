{
  "name": "Multi-Tenant N8N Credentials Configuration",
  "version": "1.0.0",
  "description": "Credential configurations for multi-tenant N8N workflows with role-based access",
  
  "credential_sets": {
    "supabase_admin": {
      "name": "Supabase Admin Database Access",
      "type": "postgres",
      "scope": "admin",
      "data": {
        "host": "${SUPABASE_DB_HOST}",
        "port": 5432,
        "database": "${SUPABASE_DB_NAME}",
        "user": "${SUPABASE_DB_USER}",
        "password": "${SUPABASE_DB_PASSWORD}",
        "ssl": {
          "require": true,
          "rejectUnauthorized": true,
          "ca": "${SUPABASE_SSL_CERT_PATH}"
        },
        "schema": "public",
        "application_name": "n8n-admin"
      },
      "permissions": [
        "read_all_tenants",
        "write_all_tenants", 
        "manage_schemas",
        "execute_functions"
      ],
      "usage": [
        "system_maintenance",
        "cross_tenant_operations",
        "admin_workflows"
      ]
    },

    "supabase_service": {
      "name": "Supabase Service Role",
      "type": "postgres",
      "scope": "service",
      "data": {
        "host": "${SUPABASE_DB_HOST}",
        "port": 5432,
        "database": "${SUPABASE_DB_NAME}",
        "user": "${SUPABASE_SERVICE_USER}",
        "password": "${SUPABASE_SERVICE_PASSWORD}",
        "ssl": {
          "require": true,
          "rejectUnauthorized": true,
          "ca": "${SUPABASE_SSL_CERT_PATH}"
        },
        "schema": "public",
        "application_name": "n8n-service"
      },
      "permissions": [
        "bypass_rls",
        "read_all_tables",
        "write_all_tables",
        "execute_functions"
      ],
      "usage": [
        "automated_workflows",
        "background_jobs",
        "system_integrations"
      ]
    },

    "supabase_tenant_scoped": {
      "name": "Supabase Tenant-Scoped Access",
      "type": "postgres",
      "scope": "tenant",
      "data": {
        "host": "${SUPABASE_DB_HOST}",
        "port": 5432,
        "database": "${SUPABASE_DB_NAME}",
        "user": "${SUPABASE_TENANT_USER}",
        "password": "${SUPABASE_TENANT_PASSWORD}",
        "ssl": {
          "require": true,
          "rejectUnauthorized": true,
          "ca": "${SUPABASE_SSL_CERT_PATH}"
        },
        "schema": "public",
        "application_name": "n8n-tenant",
        "search_path": "public",
        "options": "-c row_security=on"
      },
      "rls_context": {
        "auth.uid()": "${CURRENT_USER_ID}",
        "current_setting('app.current_tenant_id')": "${CURRENT_TENANT_ID}"
      },
      "permissions": [
        "read_tenant_data",
        "write_tenant_data",
        "manage_tenant_resources"
      ],
      "usage": [
        "user_workflows",
        "tenant_operations",
        "customer_facing_workflows"
      ]
    },

    "hasura_admin": {
      "name": "Hasura Admin Secret",
      "type": "httpHeaderAuth",
      "scope": "admin",
      "data": {
        "name": "x-hasura-admin-secret",
        "value": "${HASURA_ADMIN_SECRET}"
      },
      "additional_headers": {
        "x-hasura-role": "admin",
        "Content-Type": "application/json"
      },
      "permissions": [
        "full_graphql_access",
        "schema_introspection",
        "metadata_access",
        "bypass_permissions"
      ],
      "usage": [
        "admin_operations",
        "schema_migrations",
        "system_maintenance"
      ]
    },

    "hasura_service_role": {
      "name": "Hasura Service Role",
      "type": "httpHeaderAuth",
      "scope": "service",
      "data": {
        "name": "Authorization",
        "value": "Bearer ${HASURA_SERVICE_JWT_TOKEN}"
      },
      "additional_headers": {
        "x-hasura-role": "service",
        "Content-Type": "application/json"
      },
      "jwt_claims": {
        "sub": "service-account",
        "iss": "n8n-automation",
        "aud": "hasura",
        "exp": "${JWT_EXPIRATION}",
        "https://hasura.io/jwt/claims": {
          "x-hasura-allowed-roles": ["service"],
          "x-hasura-default-role": "service"
        }
      },
      "permissions": [
        "cross_tenant_queries",
        "system_operations",
        "automation_tasks"
      ],
      "usage": [
        "automated_workflows",
        "background_processing",
        "system_integrations"
      ]
    },

    "hasura_tenant_admin": {
      "name": "Hasura Tenant Admin",
      "type": "httpHeaderAuth",
      "scope": "tenant_admin",
      "data": {
        "name": "Authorization",
        "value": "Bearer ${HASURA_TENANT_ADMIN_JWT}"
      },
      "additional_headers": {
        "x-hasura-role": "tenant_admin",
        "x-hasura-tenant-id": "${CONTEXT_TENANT_ID}",
        "Content-Type": "application/json"
      },
      "jwt_claims": {
        "sub": "${TENANT_ADMIN_USER_ID}",
        "tenant_id": "${CONTEXT_TENANT_ID}",
        "role": "tenant_admin",
        "https://hasura.io/jwt/claims": {
          "x-hasura-allowed-roles": ["tenant_admin", "user"],
          "x-hasura-default-role": "tenant_admin",
          "x-hasura-user-id": "${TENANT_ADMIN_USER_ID}",
          "x-hasura-tenant-id": "${CONTEXT_TENANT_ID}"
        }
      },
      "permissions": [
        "manage_tenant_resources",
        "tenant_user_management",
        "tenant_workflows"
      ],
      "usage": [
        "tenant_administration",
        "user_management",
        "tenant_workflows"
      ]
    },

    "hasura_user": {
      "name": "Hasura User Access",
      "type": "httpHeaderAuth",
      "scope": "user",
      "data": {
        "name": "Authorization",
        "value": "Bearer ${HASURA_USER_JWT}"
      },
      "additional_headers": {
        "x-hasura-role": "user",
        "x-hasura-user-id": "${CONTEXT_USER_ID}",
        "x-hasura-tenant-id": "${CONTEXT_TENANT_ID}",
        "Content-Type": "application/json"
      },
      "jwt_claims": {
        "sub": "${CONTEXT_USER_ID}",
        "tenant_id": "${CONTEXT_TENANT_ID}",
        "role": "user",
        "https://hasura.io/jwt/claims": {
          "x-hasura-allowed-roles": ["user"],
          "x-hasura-default-role": "user",
          "x-hasura-user-id": "${CONTEXT_USER_ID}",
          "x-hasura-tenant-id": "${CONTEXT_TENANT_ID}"
        }
      },
      "permissions": [
        "read_own_data",
        "write_own_data",
        "tenant_scoped_access"
      ],
      "usage": [
        "user_workflows",
        "personal_automation",
        "user_triggered_processes"
      ]
    },

    "smtp_service": {
      "name": "SMTP Email Service",
      "type": "smtp",
      "scope": "service",
      "data": {
        "host": "${SMTP_HOST}",
        "port": "${SMTP_PORT}",
        "secure": true,
        "auth": {
          "user": "${SMTP_USER}",
          "pass": "${SMTP_PASSWORD}"
        },
        "tls": {
          "rejectUnauthorized": true
        }
      },
      "configuration": {
        "pool": true,
        "maxConnections": 5,
        "maxMessages": 100,
        "rateDelta": 1000,
        "rateLimit": 5
      },
      "templates": {
        "from_address": "${EMAIL_FROM_ADDRESS}",
        "from_name": "${EMAIL_FROM_NAME}",
        "reply_to": "${EMAIL_REPLY_TO}"
      },
      "usage": [
        "user_registration_emails",
        "onboarding_sequences",
        "notification_emails",
        "password_reset_emails"
      ]
    },

    "slack_notifications": {
      "name": "Slack Notification Bot",
      "type": "slackApi",
      "scope": "service",
      "data": {
        "accessToken": "${SLACK_BOT_TOKEN}"
      },
      "configuration": {
        "default_channel": "${SLACK_DEFAULT_CHANNEL}",
        "error_channel": "${SLACK_ERROR_CHANNEL}",
        "admin_channel": "${SLACK_ADMIN_CHANNEL}"
      },
      "permissions": [
        "send_messages",
        "read_channels",
        "upload_files"
      ],
      "usage": [
        "error_alerts",
        "system_notifications",
        "admin_alerts",
        "workflow_status_updates"
      ]
    },

    "discord_webhooks": {
      "name": "Discord Webhook Integration",
      "type": "webhook",
      "scope": "service",
      "data": {
        "webhook_url": "${DISCORD_WEBHOOK_URL}",
        "username": "Callabo Bot",
        "avatar_url": "${DISCORD_BOT_AVATAR_URL}"
      },
      "configuration": {
        "rate_limit": {
          "requests_per_second": 5,
          "burst_limit": 10
        },
        "retry_policy": {
          "max_retries": 3,
          "backoff_factor": 2
        }
      },
      "usage": [
        "community_notifications",
        "error_reporting",
        "status_updates"
      ]
    },

    "api_monitoring": {
      "name": "API Monitoring Service",
      "type": "httpHeaderAuth",
      "scope": "service",
      "data": {
        "name": "Authorization",
        "value": "Bearer ${MONITORING_API_TOKEN}"
      },
      "endpoints": {
        "metrics": "${MONITORING_METRICS_ENDPOINT}",
        "logs": "${MONITORING_LOGS_ENDPOINT}",
        "alerts": "${MONITORING_ALERTS_ENDPOINT}"
      },
      "usage": [
        "performance_monitoring",
        "error_tracking",
        "usage_analytics",
        "health_checks"
      ]
    }
  },

  "credential_rotation": {
    "enabled": true,
    "schedule": {
      "api_keys": "0 0 1 * *",
      "jwt_tokens": "0 0 */7 * *", 
      "database_passwords": "0 0 1 */3 *"
    },
    "notification_channels": [
      "slack_admin_channel",
      "email_admin_alerts"
    ]
  },

  "environment_mapping": {
    "development": {
      "hasura_endpoint": "http://localhost:8080/v1/graphql",
      "supabase_host": "localhost",
      "n8n_webhook_base": "http://localhost:5678"
    },
    "staging": {
      "hasura_endpoint": "https://staging-hasura.callabo-platform.com/v1/graphql",
      "supabase_host": "staging-db.supabase.co",
      "n8n_webhook_base": "https://staging-n8n.callabo-platform.com"
    },
    "production": {
      "hasura_endpoint": "https://hasura.callabo-platform.com/v1/graphql",
      "supabase_host": "db.supabase.co",
      "n8n_webhook_base": "https://n8n.callabo-platform.com"
    }
  },

  "security_policies": {
    "encryption": {
      "credentials_at_rest": true,
      "credentials_in_transit": true,
      "key_rotation": "quarterly"
    },
    "access_control": {
      "rbac": true,
      "mfa_required": ["admin", "service"],
      "ip_restrictions": {
        "admin": ["specific_ips"],
        "service": ["datacenter_ips"]
      }
    },
    "audit_logging": {
      "enabled": true,
      "log_credential_usage": true,
      "log_permission_changes": true,
      "retention_days": 90
    }
  },

  "monitoring": {
    "credential_health": {
      "check_interval_minutes": 15,
      "failure_threshold": 3,
      "alert_channels": ["slack_admin", "email_alerts"]
    },
    "permission_monitoring": {
      "track_permission_usage": true,
      "detect_privilege_escalation": true,
      "anomaly_detection": true
    }
  },

  "backup_and_recovery": {
    "credential_backup": {
      "enabled": true,
      "encrypted": true,
      "schedule": "daily",
      "retention_days": 30
    },
    "emergency_access": {
      "break_glass_credentials": true,
      "emergency_contacts": ["admin@callabo-platform.com"],
      "approval_required": true
    }
  }
}